package info.nukoneko.android.qritter;import android.app.Activity;import android.content.Context;import android.os.Bundle;import info.nukoneko.android.qritter.common.BaseActivity;import info.nukoneko.android.qritter.twitter.SimpleStreamListener;import info.nukoneko.android.qritter.twitter.TwitterOAuthActivity;import info.nukoneko.android.qritter.util.async.AsyncListener;import info.nukoneko.android.qritter.util.async.SimpleAsync;import info.nukoneko.android.qritter.util.TwitterUtil;import rx.Observable;import rx.Subscriber;import twitter4j.Status;import twitter4j.Twitter;import twitter4j.TwitterException;import twitter4j.TwitterStream;import twitter4j.User;import twitter4j.auth.AccessToken;/** * Created by TEJNEK on 2016/03/17. */public class MainActivity extends BaseActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (TwitterUtil.hasAccessToken(this)) {            Twitter twitter = TwitterUtil.getTwitterInstance(this);            new SimpleAsync(this).start(new AsyncListener<User>() {                @Override                public User doTask() throws TwitterException {                    return twitter.showUser(twitter.getId());                }                @Override                public void onResult(Activity context, User result) {                    SimpleProfileActivity.startActivity(context, result);                }            });//            twitterSimpleStream(this).subscribe(status -> {//                System.out.println(status.getText());//            });        } else {            TwitterOAuthActivity.startActivity(this);        }    }    public Observable<Status> twitterSimpleStream(Context context){        return Observable.create(new Observable.OnSubscribe<Status>() {            @Override            public void call(Subscriber<? super Status> subscriber) {                final TwitterStream stream = TwitterUtil.getTwitterStreamInstance(context);                assert stream != null;                stream.addListener(new SimpleStreamListener() {                    @Override                    public void onStatus(Status status) {                        subscriber.onNext(status);                    }                    @Override                    public void onException(Exception ex) {                        subscriber.onError(ex);                    }                });                stream.user();            }        });    }}