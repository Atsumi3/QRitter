package info.nukoneko.android.qritter.util;import android.content.Context;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import java.util.ArrayList;import info.nukoneko.android.qritter.model.ModelAccessTokenObject;import io.realm.Realm;import io.realm.RealmResults;import twitter4j.Twitter;import twitter4j.TwitterFactory;import twitter4j.TwitterStream;import twitter4j.TwitterStreamFactory;import twitter4j.auth.AccessToken;import twitter4j.conf.ConfigurationBuilder;/** * Created by TEJNEK on 2016/03/17. */final public class TwitterUtil {    private static final String apiKey = "ijKpGLCQMqp4OMJRddbwIMNtE";    private static final String apiSecret = "q4UDvYcouwGTZfirRfMLaLGHJynW6TVcxOzGEZQ7alnjsXCpfI";    /***     * Twitterインスタンスを取得します。アクセストークンが保存されていれば自動的にセットします。     * @param context Context     * @param userId nullならば先頭IDを取得     * @return     */    public static Twitter getTwitterInstance(@NonNull Context context, @Nullable Long userId){        TwitterFactory factory = new TwitterFactory();        Twitter twitter = factory.getInstance();        twitter.setOAuthConsumer(apiKey, apiSecret);        if ( userId != null && hasAccessToken(context)) {            twitter.setOAuthAccessToken(loadAccessToken(context, userId));        }        return twitter;    }    public static Twitter getTwitterInstance(@NonNull Context context){        return getTwitterInstance(context, null);    }    /***     * Twitterインスタンスを取得します。アクセストークンが保存されていれば自動的にセットします。     * @param context Context     * @param userId nullならば先頭IDを取得     * @return     */    @Nullable    public static TwitterStream getTwitterStreamInstance(@NonNull Context context, @Nullable Long userId){        ConfigurationBuilder builder = new ConfigurationBuilder();        {            builder.setOAuthConsumerKey(apiKey);            builder.setOAuthConsumerSecret(apiSecret);            AccessToken accessToken = loadAccessToken(context, userId);            if (accessToken != null) {                builder.setOAuthAccessToken(accessToken.getToken());                builder.setOAuthAccessTokenSecret(accessToken.getTokenSecret());            } else {                //deleteAccount(context, userId);                return null;            }        }        twitter4j.conf.Configuration configuration = builder.build();        return new TwitterStreamFactory(configuration).getInstance();    }    @Nullable    public static AccessToken loadAccessToken(@NonNull Context context, @Nullable Long userId) {        ModelAccessTokenObject tokenObject = getAccount(context, userId);        if (tokenObject == null){            return null;        }        return new AccessToken(                tokenObject.getUserToken(),                tokenObject.getUserTokenSecret(),                tokenObject.getUserId());    }    /***     * アクセストークンが存在する場合はtrueを返します。     * @return false or true     */    public static boolean hasAccessToken(@NonNull Context context) {        Realm realm = Realm.getInstance(context);        boolean hasToken = realm.where(ModelAccessTokenObject.class).findAll().size() > 0;        realm.close();        return hasToken;    }    /* ---  database 操作 --- */    public static void addAccount(@NonNull Context context, @NonNull AccessToken accessToken){        ModelAccessTokenObject tokenObject = new ModelAccessTokenObject();        tokenObject.setUserId(accessToken.getUserId());        tokenObject.setUserName(accessToken.getScreenName());        tokenObject.setUserScreenName(accessToken.getScreenName());        tokenObject.setUserToken(accessToken.getToken());        tokenObject.setUserTokenSecret(accessToken.getTokenSecret());        Realm realm = Realm.getInstance(context);        realm.beginTransaction();        realm.copyToRealmOrUpdate(tokenObject);        realm.commitTransaction();        realm.close();    }    public static void deleteAccount(@NonNull Context context, @NonNull Long userId){        Realm realm = Realm.getInstance(context);        ModelAccessTokenObject result =                realm                        .where(ModelAccessTokenObject.class)                        .equalTo("userId", userId)                        .findFirst();        if (result == null){            return;        }        realm.beginTransaction();        result.removeFromRealm();        realm.commitTransaction();        realm.close();    }    public static void deleteAllAccount(@NonNull Context context){        Realm realm = Realm.getInstance(context);        RealmResults<ModelAccessTokenObject> result =                realm.where(ModelAccessTokenObject.class).findAll();        realm.beginTransaction();        result.clear();        realm.commitTransaction();        realm.close();    }    public static ArrayList<Long> getAccountIds(@NonNull Context context) {        Realm realm = Realm.getInstance(context);        ArrayList<Long> results = new ArrayList<>();        for (ModelAccessTokenObject token : realm.where(ModelAccessTokenObject.class).findAll()){            try {                results.add(token.getUserId());            }catch (Exception e){                e.printStackTrace();            }        }        realm.close();        return results;    }    @NonNull    public static ArrayList<ModelAccessTokenObject> getAccounts(@NonNull Context context) {        Realm realm = Realm.getInstance(context);        ArrayList<ModelAccessTokenObject> results = new ArrayList<>();        for (ModelAccessTokenObject token : realm.where(ModelAccessTokenObject.class).findAll()){            results.add(token);        }        realm.close();        return results;    }    @Nullable    public static ModelAccessTokenObject getAccount(@NonNull Context context, @Nullable Long userId) {        if (userId == null){            ArrayList<ModelAccessTokenObject> list = getAccounts(context);            return list.size() > 0 ? list.get(0) : null;        }        Realm realm = Realm.getInstance(context);        ModelAccessTokenObject returnObject = realm                .where(ModelAccessTokenObject.class)                .equalTo("userId", userId)                .findFirst();        realm.close();        return returnObject;    }}